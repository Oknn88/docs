"use strict";(self.webpackChunksqb_docs=self.webpackChunksqb_docs||[]).push([[507],{6002:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>g,frontMatter:()=>p,metadata:()=>c,toc:()=>b});r(7294);var a=r(3905),n=r(3070),i=r(551);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}const p={title:"Serializing",sidebar_position:2,slug:"/sqlquerybuilder/serializing",description:"Serializing",keywords:["query","builder","code","javascript","sqb"]},u=void 0,c={unversionedId:"SqlQueryBuilder/Serializing",id:"SqlQueryBuilder/Serializing",title:"Serializing",description:"Serializing",source:"@site/docs/SqlQueryBuilder/Serializing.mdx",sourceDirName:"SqlQueryBuilder",slug:"/sqlquerybuilder/serializing",permalink:"/docs/docs/sqlquerybuilder/serializing",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Serializing",sidebar_position:2,slug:"/sqlquerybuilder/serializing",description:"Serializing",keywords:["query","builder","code","javascript","sqb"]},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/docs/sqlquerybuilder/introduction"},next:{title:"DeleteQuery Class",permalink:"/docs/docs/sqlquerybuilder/queryobjects/deletequeryclass"}},m={},b=[{value:"Serializing",id:"serializing",level:2},{value:"How To Use",id:"how-to-use",level:2}],d={toc:b},y="wrapper";function g(e){var{components:t}=e,r=o(e,["components"]);return(0,a.kt)(y,s(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},a=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),a.forEach((function(t){l(e,t,r[t])}))}return e}({},d,r),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"serializing"},"Serializing"),(0,a.kt)("p",null,"SQB library has a powerful JS to SQL serialization feature. All Query classes have generate() method which serializes JS object into SQL string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"query.generate(options[, values])\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"options")," (Object):"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"dialect")," (String): Name of the dialect to be used when serializing.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"prettyPrint")," (Boolean=true): If true, sql string will be serialized pretty formatted.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"paramType")," (ParamType=ParamType.COLON): Controls how sql parameters will be serialized."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"ParamType.COLON: Sql parameters will be serialized (:param) format and result.params will be an Object instance that contains param:value pairs."),(0,a.kt)("li",{parentName:"ul"},"ParamType.QUESTION_MARK: Sql parameters will be serialized (?) format and result.params will be an Array instance that contains values."),(0,a.kt)("li",{parentName:"ul"},"ParamType.DOLLAR: Sql parameters will be serialized ($1) format and result.params will be an Array instance that contains values."),(0,a.kt)("li",{parentName:"ul"},"ParamType.AT: Sql parameters will be serialized (@param) format and result.params will be an Object instance that contains param:value pairs."))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"values")," (Object): Object instance contains parameter/value pairs.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Returns")," (Object): It returns object instance contains sql and parameter values."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"sql")," (String): Serialized sql string")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"values")," (Array|Object): Depends on paramType this property contains array of values or objects instance that contains parameter/value pairs"))))),(0,a.kt)("h2",{id:"how-to-use"},"How To Use"),(0,a.kt)(n.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"Example - 1",label:"Example - 1",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\n\n// Step 1 - Load serialization extension\nsqb.use(require('sqb-serializer-pg'));\n\n// Step 2 - Create a query object\nquery = sqb.select('b.ID book_id',\n        'b.name book_name', 'c.name category_name')\n        .from('BOOKS b')\n        .join(sqb.join('CATEGORY c').on(Op.eq('c.id', sqb.raw('b.category_id'))));\n\n// Step 3 - Serialize the query\nconst result = serializer.generate({\n    dialect:'pg',\n    prettyPrint: true\n});\n\n// Step 4 - Use the result in your code\nconsole.log(result.sql);\n"))),(0,a.kt)(i.Z,{value:"Example - 2",label:"Example - 2",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\n\n// Step 1 - Load serialization extension\nsqb.use(require('sqb-serializer-pg'));\n\n// Step 2 - Create a query object\nquery =\n    sqb.select('b.ID book_id',\n        'b.name book_name', 'c.name category_name')\n        .from('BOOKS b')\n        .join(sqb.join('CATEGORY c').on(Op.eq('c.id', sqb.raw('b.category_id'))))\n        .where(Op.like('c.name', '%potter%'))\n\n// Step 3 - Serialize the query with given config\nconst result = query.generate({\n      dialect:'pg',\n      prettyPrint: true\n    });\n\n// Step 4 - Use the result in your code\nconsole.log(result.sql);\nconsole.log(result.values);\n")))))}g.isMDXComponent=!0}}]);