"use strict";(self.webpackChunksqb_docs=self.webpackChunksqb_docs||[]).push([[457],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},i="mdxType",q={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),i=c(t),m=s,g=i["".concat(p,".").concat(m)]||i[m]||q[m]||o;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function g(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[i]="string"==typeof e?e:s,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>i});t(7294);var r=t(3905);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}const l={title:"Sql Operations",sidebar_position:3,slug:"/sqlquerybuilder/sqloperations",description:"Sql Operations",keywords:["sql","operation","query","Comparison","Operators"]},p=void 0,c={unversionedId:"SqlQueryBuilder/SqlOperations",id:"SqlQueryBuilder/SqlOperations",title:"Sql Operations",description:"Sql Operations",source:"@site/docs/SqlQueryBuilder/SqlOperations.mdx",sourceDirName:"SqlQueryBuilder",slug:"/sqlquerybuilder/sqloperations",permalink:"/docs/docs/sqlquerybuilder/sqloperations",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Sql Operations",sidebar_position:3,slug:"/sqlquerybuilder/sqloperations",description:"Sql Operations",keywords:["sql","operation","query","Comparison","Operators"]},sidebar:"tutorialSidebar",previous:{title:"Case Class",permalink:"/docs/docs/sqlquerybuilder/sqlobjects/caseclass"},next:{title:"Pool Class",permalink:"/docs/docs/connectionwrapper/poolclass"}},u={},i=[{value:"Operators",id:"operators",level:2},{value:"Op.and()",id:"opand",level:3},{value:"Op.or()",id:"opor",level:3},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Op.eq()",id:"opeq",level:3},{value:"Op.ne()",id:"opne",level:3},{value:"Op.gt()",id:"opgt",level:3},{value:"Op.gte()",id:"opgte",level:3},{value:"Op.lt()",id:"oplt",level:3},{value:"Op.lte()",id:"oplte",level:3},{value:"Op.between()",id:"opbetween",level:3},{value:"Op.notBetween()",id:"opnotbetween",level:3},{value:"Op.is()",id:"opis",level:3},{value:"Op.not()",id:"opnot",level:3},{value:"Op.like()",id:"oplike",level:3},{value:"Op.notLike()",id:"opnotlike",level:3},{value:"Op.ilike()",id:"opilike",level:3},{value:"Op.notILike()",id:"opnotilike",level:3},{value:"Op.exists()",id:"opexists",level:3},{value:"Op.notExists()",id:"opnotexists",level:3}],q={toc:i},m="wrapper";function g(e){var{components:n}=e,t=a(e,["components"]);return(0,r.kt)(m,o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){s(e,n,t[n])}))}return e}({},q,t),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"operators"},"Operators"),(0,r.kt)("h3",{id:"opand"},"Op.and()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.and(...operators)")),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"and")," logical operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.and(Op.eq('name', 'John'), Op.gte('age', 16)));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({and: {name: 'John', 'age >': 16}});\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere (name = 'John' and age >= 16)\n")),(0,r.kt)("h3",{id:"opor"},"Op.or()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.or(...operators)")),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"or")," logical operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.or(\n        Op.eq('name', 'John'),\n        Op.gte('age', 16)\n        ));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({or: {\n      name: 'John',\n      'age >': 16\n    }});\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere (name = 'John' or age > 16)\n")),(0,r.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,r.kt)("h3",{id:"opeq"},"Op.eq()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.eq(expression, value)")),(0,r.kt)("p",null,"Creates an e",(0,r.kt)("inlineCode",{parentName:"p"},"qual (=)")," comparison operator"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(\n        Op.eq('name', 'John'),\n        Op.eq('age', 16)\n        );\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n    name: 'John',\n    'age =': 16\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere name = 'John' and age = 16\n")),(0,r.kt)("h3",{id:"opne"},"Op.ne()"),(0,r.kt)("p",null,"Creates an not ",(0,r.kt)("inlineCode",{parentName:"p"},"equal (!=)")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.ne(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.ne('age', 16));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n    'age !=': 16\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere age != 16\n")),(0,r.kt)("h3",{id:"opgt"},"Op.gt()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"greater than (>)")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.gt(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.gt('age', 16));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n    'age >': 16\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere age > 16\n")),(0,r.kt)("h3",{id:"opgte"},"Op.gte()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"greater than or equal to (>=)")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.gte(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.gte('age', 16));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n    'age >=': 16\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere age >= 16\n")),(0,r.kt)("h3",{id:"oplt"},"Op.lt()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"lower than (>)")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.lt(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.lt('age', 16));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n    'age <': 16\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere age < 16\n")),(0,r.kt)("h3",{id:"oplte"},"Op.lte()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"lower than or equal to (<=)")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.lte(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.lte('age', 16));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n    'age <=': 16\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere age <= 16\n")),(0,r.kt)("h3",{id:"opbetween"},"Op.between()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"between")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.between(expression, first, second)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.or(\n        Op.between('age', 18, 22),\n        Op.between('age', 30, 32)\n        ));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({or: {\n      'age between': [18,22],\n      'age btw': [30,32],\n    }});\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere (age between 18 and 22 or age between 30 and 32)\n")),(0,r.kt)("h3",{id:"opnotbetween"},"Op.notBetween()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"not between")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.notBetween(expression, first, second)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.or(\n        Op.notBetween('age', 18, 22),\n        Op.notBetween('age', 30, 32)\n        ));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({or: {\n      'age !between': [18,22],\n      'age !btw': [30,32],\n    }});\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere (age not between 18 and 22 or age not between 30 and 32)\n")),(0,r.kt)("h3",{id:"opis"},"Op.is()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"is")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.is(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.is('gender', null));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n      'gender is': null\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere gender is null\n")),(0,r.kt)("h3",{id:"opnot"},"Op.not()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"is not")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.not(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.not('gender', null));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n      'gender !is': null\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere gender is not null\n")),(0,r.kt)("h3",{id:"oplike"},"Op.like()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"like")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.like(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.like('name', '%John%'));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n      'name like': '%John%'\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere name like '%John%'\n")),(0,r.kt)("h3",{id:"opnotlike"},"Op.notLike()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"not like")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.notLike(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.notLike('name', '%John%'));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n      'name !like': '%John%'\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere name not like '%John%'\n")),(0,r.kt)("h3",{id:"opilike"},"Op.ilike()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"ilike")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.iLike(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.ilike('name', '%John%'));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n      'name ilike': '%John%'\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere name ilike '%John%'\n")),(0,r.kt)("h3",{id:"opnotilike"},"Op.notILike()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"not ilike")," comparison operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.notILike(expression, value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where(Op.notILike('name', '%John%'));\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer')\n    .where({\n      'name !ilike': '%John%'\n    });\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer\nwhere name not ilike '%John%'\n")),(0,r.kt)("h3",{id:"opexists"},"Op.exists()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"exists")," operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.exists(SelectQuery)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer c')\n    .where(Op.exists(\n        sqb.select().from('customer_accounts a')\n        .where(\n            Op.eq('a.customer_id', sqb.raw('c.id')),\n            Op.gt('a.balance', 0)\n            )\n        )\n    );\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer c')\n    .where({exists:\n              sqb.select().from('customer_accounts a')\n                  .where(\n                      Op.eq('a.customer_id', sqb.raw('c.id')),\n                      Op.gt('a.balance', 0)\n                  )\n        }\n    );\nconsole.log(query.generate().sql);\n")),(0,r.kt)("h3",{id:"opnotexists"},"Op.notExists()"),(0,r.kt)("p",null,"Creates an ",(0,r.kt)("inlineCode",{parentName:"p"},"exists")," operator"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Op.notExists(SelectQuery)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer c')\n    .where(Op.notExists(\n        sqb.select().from('customer_accounts a')\n        .where(\n            Op.eq('a.customer_id', sqb.raw('c.id')),\n            Op.gt('a.balance', 0)\n            )\n        )\n    );\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const sqb = require('sqb');\nconst Op = sqb.Op;\nconst query = sqb.select().from('customer c')\n    .where({'!exists':\n              sqb.select().from('customer_accounts a')\n                  .where(\n                      Op.eq('a.customer_id', sqb.raw('c.id')),\n                      Op.gt('a.balance', 0)\n                  )\n        }\n    );\nconsole.log(query.generate().sql);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from customer c\nwhere not exists (select * from customer_accounts a\n  where a.customer_id = c.id and a.balance > 0)\n")))}g.isMDXComponent=!0}}]);