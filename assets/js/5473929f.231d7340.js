"use strict";(self.webpackChunksqb_docs=self.webpackChunksqb_docs||[]).push([[366],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(l,".").concat(d)]||u[d]||b[d]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4453:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>u});n(7294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const s={title:"Extensions",sidebar_position:5,slug:"/extensions",description:"Extensions",keywords:["extensions","features","category"]},l=void 0,c={unversionedId:"Extensions",id:"Extensions",title:"Extensions",description:"Extensions",source:"@site/docs/Extensions.mdx",sourceDirName:".",slug:"/extensions",permalink:"/docs/docs/extensions",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Extensions",sidebar_position:5,slug:"/extensions",description:"Extensions",keywords:["extensions","features","category"]},sidebar:"tutorialSidebar",previous:{title:"Enumerated Types",permalink:"/docs/docs/enumeratedtypes"}},p={},u=[{value:"Known Extensions",id:"known-extensions",level:2}],b={toc:u},d="wrapper";function m(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)(d,o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},b,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"SQB is designed to be a lightweight and extensible interface to keep applications need less memory and work fast. Any application can load only required extension to use great sqb features, such as serialization and connection. There is currently two kind of extensions. Serializer extensions and connection adapters. Generally connection adapters includes required serializer extensions and it is not needed to load both at same time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const sqb = require('sqb');\nsqb.use(require('sqb-serializer-oracle')); // Enable Oracle serialization\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const sqb = require('sqb');\nsqb.use(require('sqb-connect-pg')); // Load adapter for Postgre SQL driver\n\nconst sr = sqb.createPool({\ndialect:'pg',\nuser: 'anyuser',\npassword: 'anypass',\ndatabase: 'dbpath'\n}); // Create Postgre SQL connection pool\n")),(0,r.kt)("h2",{id:"known-extensions"},"Known Extensions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Extension"),(0,r.kt)("th",{parentName:"tr",align:null},"Category"),(0,r.kt)("th",{parentName:"tr",align:null},"Features"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-connect-oracledb"},"sqb-connect-oracledb"),(0,r.kt)("br",null),"Connection adapter for Oracle",(0,r.kt)("br",null),"Includes: ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/oracle/node-oracledb"},"oracledb"),", ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-serializer-oracle"},"sqb-serializer-oracle")),(0,r.kt)("td",{parentName:"tr",align:null},"Adapter"),(0,r.kt)("td",{parentName:"tr",align:null},"Native",(0,r.kt)("br",null),"\u2705 Cursor",(0,r.kt)("br",null),"\u2705 MetaData/Query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-connect-pg"},"sqb-connect-pg"),(0,r.kt)("br",null),"Connection adapter for Postgre SQL",(0,r.kt)("br",null),"Includes: ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/brianc/node-postgres"},"node-postgres"),", ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-serializer-pg"},"sqb-serializer-pg")),(0,r.kt)("td",{parentName:"tr",align:null},"Adapter"),(0,r.kt)("td",{parentName:"tr",align:null},"PureJS",(0,r.kt)("br",null),"\u2705 Cursor",(0,r.kt)("br",null),"\u2705 MetaData/Query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-connect-sqlite"},"sqb-connect-sqlite"),(0,r.kt)("br",null),"Connection adapter for SQLite",(0,r.kt)("br",null),"Includes: ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/mapbox/node-sqlite3"},"node-sqlite3")),(0,r.kt)("td",{parentName:"tr",align:null},"Adapter"),(0,r.kt)("td",{parentName:"tr",align:null},"Native",(0,r.kt)("br",null),"\u2705 Cursor",(0,r.kt)("br",null),"\u2705 MetaData/Query")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-serializer-oracle"},"sqb-serializer-oracle"),(0,r.kt)("br",null),"Serializer extension for Oracle"),(0,r.kt)("td",{parentName:"tr",align:null},"Serialization"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/panates/sqb-serializer-pg"},"sqb-serializer-pg"),(0,r.kt)("br",null),"Serializer extension for Postgre SQL"),(0,r.kt)("td",{parentName:"tr",align:null},"Serialization"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))))}m.isMDXComponent=!0}}]);