"use strict";(self.webpackChunksqb_docs=self.webpackChunksqb_docs||[]).push([[1375],{7368:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>f,frontMatter:()=>p,metadata:()=>i,toc:()=>d});r(7294);var n=r(3905),l=r(3070),a=r(551);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))})),e}function u(e,t){if(null==e)return{};var r,n,l=function(e,t){if(null==e)return{};var r,n,l={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}const p={title:"SelectQuery Class",sidebar_position:3,slug:"/sqlquerybuilder/queryobjects/selectqueryclass",description:"SelectQuery Class",keywords:["methods","select","query"]},c=void 0,i={unversionedId:"SqlQueryBuilder/QueryObjects/SelectQueryClass",id:"SqlQueryBuilder/QueryObjects/SelectQueryClass",title:"SelectQuery Class",description:"SelectQuery Class",source:"@site/docs/SqlQueryBuilder/QueryObjects/SelectQueryClass.mdx",sourceDirName:"SqlQueryBuilder/QueryObjects",slug:"/sqlquerybuilder/queryobjects/selectqueryclass",permalink:"/docs/sqlquerybuilder/queryobjects/selectqueryclass",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"SelectQuery Class",sidebar_position:3,slug:"/sqlquerybuilder/queryobjects/selectqueryclass",description:"SelectQuery Class",keywords:["methods","select","query"]},sidebar:"tutorialSidebar",previous:{title:"InsertQuery Class",permalink:"/docs/sqlquerybuilder/queryobjects/insertqueryclass"},next:{title:"UpdateQuery Class",permalink:"/docs/sqlquerybuilder/queryobjects/updatequeryclass"}},m={},d=[{value:"Construction",id:"construction",level:2},{value:"Methods",id:"methods",level:2},{value:"SelectQuery.prototype.as()",id:"selectqueryprototypeas",level:3},{value:"SelectQuery.prototype.columns()",id:"selectqueryprototypecolumns",level:3},{value:"SelectQuery.prototype.from()",id:"selectqueryprototypefrom",level:3},{value:"SelectQuery.prototype.groupBy()",id:"selectqueryprototypegroupby",level:3},{value:"SelectQuery.prototype.join()",id:"selectqueryprototypejoin",level:3},{value:"SelectQuery.prototype.limit()",id:"selectqueryprototypelimit",level:3},{value:"SelectQuery.prototype.offset()",id:"selectqueryprototypeoffset",level:3},{value:"SelectQuery.prototype.orderBy()",id:"selectqueryprototypeorderby",level:3},{value:"SelectQuery.prototype.where()",id:"selectqueryprototypewhere",level:3},{value:"Query.prototype.execute()",id:"queryprototypeexecute",level:3},{value:"Query.prototype.values()",id:"queryprototypevalues",level:3},{value:"Event",id:"event",level:2},{value:"fetch",id:"fetch",level:3}],k={toc:d},y="wrapper";function f(e){var{components:t}=e,r=u(e,["components"]);return(0,n.kt)(y,s(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter((function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable})))),n.forEach((function(t){o(e,t,r[t])}))}return e}({},k,r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"construction"},"Construction"),(0,n.kt)("p",null,"SQB namespace, ",(0,n.kt)("a",{parentName:"p",href:"/docs/connectionwrapper/poolclass"},"Pool")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/connectionwrapper/connectionclass"},"Connection")," have ",(0,n.kt)("inlineCode",{parentName:"p"},"select()")," function that creates SelectQuery instance."),(0,n.kt)("p",null,"A Query instance that created by ",(0,n.kt)("a",{parentName:"p",href:"/docs/connectionwrapper/poolclass"},"Pool")," and ",(0,n.kt)("a",{parentName:"p",href:"/docs/connectionwrapper/connectionclass"},"Connection")," can be executed directly."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"query = (sqb|pool|connection).select(..column)\n")),(0,n.kt)("p",null,"If any argument passed to constructor, columns() method is called with given arguments."),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("h3",{id:"selectqueryprototypeas"},"SelectQuery.prototype.as()"),(0,n.kt)("p",null,"Sets alias for sub-select queries"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".as(alias)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"alias")," (String) : Alias for query.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Returns"),": SelectQuery itself."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('p.id')\n    .from(sqb.select().from('person').as('p'));\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect p.id from (select * from person) p\n")),(0,n.kt)("h3",{id:"selectqueryprototypecolumns"},"SelectQuery.prototype.columns()"),(0,n.kt)("p",null,'Defines "columns" part of select query.'),(0,n.kt)(l.Z,{mdxType:"Tabs"},(0,n.kt)(a.Z,{value:"Alternative-1",label:"Alternative-1",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".columns(...column)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"column")," : String representation of column name"),(0,n.kt)("p",{parentName:"li"},"  ",(0,n.kt)("strong",{parentName:"p"},"Format:")),(0,n.kt)("p",{parentName:"li"},"  ","[(tableName|tableAlias).]"," fieldname ","[as][columnAlias]"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},".select(\n  'field1',\n  'field2 as f1',\n  'field3 f1',\n  'table1.field4',\n  't1.field5',\n  't1.field6 f6'\n).from('table1 t1')\n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('c.id', 'c.name customer_name').from('customer c');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect c.id, c.name customer_name from customer c\n"))),(0,n.kt)(a.Z,{value:"Alternative-2",label:"Alternative-2",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".columns(...selectQuery)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"selectQuery")," : Instance of a SelectQuery."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('c.id',\n    sqb.select('name').from('person').where(Op.eq('id', 1)).as('persone_name')\n).from('customer c');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect c.id, (select name from person where id = 1) persone_name from customer c\n"))),(0,n.kt)(a.Z,{value:"Alternative-3",label:"Alternative-3",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".columns(...raw)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"raw")," : Raw sql object."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('id', sqb.raw('anyfunc()')).from('customer');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect id, anyfunc() from customer\n")))),(0,n.kt)("h3",{id:"selectqueryprototypefrom"},"SelectQuery.prototype.from()"),(0,n.kt)("p",null,'Defines "from" part of select query.'),(0,n.kt)(l.Z,{mdxType:"Tabs"},(0,n.kt)(a.Z,{value:"Alternative-1",label:"Alternative-1",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".from(...tableName)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"tableName")," : String representation of table name."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('c.*').from('customer c');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect c.* from customer c\n"))),(0,n.kt)(a.Z,{value:"Alternative-2",label:"Alternative-2",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".from(...selectSql)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"selectSql")," : Instance of a SelectQuery."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('t1.id', 't1.name').from(\n    sqb.select().from('person').as('t1')\n);\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect t1.id, t1.name from (select * from person) t1\n"))),(0,n.kt)(a.Z,{value:"Alternative-3",label:"Alternative-3",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".from(...raw)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"raw")," : Raw sql object."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('id', 'name').from(\n    sqb.raw('anyproc()')\n);\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect id, name from anyproc()\n")))),(0,n.kt)("h3",{id:"selectqueryprototypegroupby"},"SelectQuery.prototype.groupBy()"),(0,n.kt)("p",null,'Defines "group by" part of ',(0,n.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".groupBy(...column)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"column")," (String|Raw) : String representation of column name or Raw sql.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Returns"),": SelectQuery itself."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('c.name')\n    .from('customer c')\n    .groupBy('age');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect c.name from customer c\ngroup by age\n")),(0,n.kt)("h3",{id:"selectqueryprototypejoin"},"SelectQuery.prototype.join()"),(0,n.kt)("p",null,'Adds "join" statements to ',(0,n.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".join(..join)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"join")," (Join): Instance of ",(0,n.kt)("a",{parentName:"li",href:"/docs/sqlquerybuilder/sqlobjects/joinclass"},"Join")," class"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = sqb.select('c.*')\n    .from('customer c')\n    .join(sqb.join('person p').on(['p.id', sqb.raw('c.person_id')]));\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect c.* from customer c\ninner join person p on p.id = c.person_id\n")),(0,n.kt)("h3",{id:"selectqueryprototypelimit"},"SelectQuery.prototype.limit()"),(0,n.kt)("p",null,"Sets limit for ",(0,n.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".limit(value)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"value")," (Number) : Value for limit")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Returns"),": SelectQuery itself."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = pool.select().from('customer').limit(10);\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect * from customer\nLIMIT 10\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Oracle 11g:\nselect * from (\n  select * from customer\n) where rownum <= 10\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Oracle 12c:\nselect * from customer\nFETCH FIRST 10 ROWS ONLY\n")),(0,n.kt)("h3",{id:"selectqueryprototypeoffset"},"SelectQuery.prototype.offset()"),(0,n.kt)("p",null,"Sets offset for ",(0,n.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".offset(value)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"value")," (Number) : Value for offset")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Returns"),": SelectQuery itself."))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var query = pool.select().from('customer').offset(25).limit(10);\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect * from customer\nLIMIT 10 OFFSET 25\n\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Oracle 11g:\nselect * from (\n  select /*+ first_rows(10) */ t.*, rownum row$number from (\n    select * from customer\n  ) t where rownum <= 35\n) where row$number >= 26\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Oracle 12c:\nselect * from customer\nOFFSET 25 ROWS FETCH NEXT 10 ROWS ONLY\n")),(0,n.kt)("h3",{id:"selectqueryprototypeorderby"},"SelectQuery.prototype.orderBy()"),(0,n.kt)("p",null,'Defines "order by" part of ',(0,n.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".orderBy(...column)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"column")," (String|Raw) : String representation of column name or Raw sql. Format:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-markup"},"  [+|-] [(tablename|alias).] fieldname [asc|ascending|dsc|descending]\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},'.orderBy(\n"field1",            // field1 ascending\n"field1 asc",        // field1 ascending\n"field1 ascending",  // field1 ascending\n"+field1",           // field1 ascending\n\n"field1 desc",       // field1 descending\n"field1 descending", // field1 descending\n"-field1",           // field1 descending\n\n  "table2.field2",     // table2.field2 ascending\n  "-table2.field2",    // table2.field2 descending\n)\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": SelectQuery itself.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Example")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"var query = sqb.select('id', 'name')\n    .from('customer')\n    .orderBy('f1', '-f2', 'f3 desc', 'f4 descending');\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"Generated SQL for Postgres:\nselect id, name from customer\norder by f1, f2 desc, f3 desc, f4 desc\n")),(0,n.kt)("h3",{id:"selectqueryprototypewhere"},"SelectQuery.prototype.where()"),(0,n.kt)("p",null,'Defines "where" part of ',(0,n.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},".where(..conditions)")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"conditions"),": ",(0,n.kt)("a",{parentName:"li",href:"/docs/sqlquerybuilder/sqloperations#operators"},"condition")," arrays."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Returns"),": UpdateQuery itself.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const query = sqb.delete('customer')\n    .where(Op.like('name', '%john%'));\n")),(0,n.kt)("h3",{id:"queryprototypeexecute"},"Query.prototype.execute()"),(0,n.kt)("p",null,"Executes query and returns Promise. Please check ",(0,n.kt)("a",{parentName:"p",href:"/docs/connectionwrapper/executingqueries"},"executing queries")," section for details."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"pool.select()\n    .from('customer')\n    .where({'name like': '%john%'})\n    .execute({\n       autoCommit: true\n     }).then(result => {\n       console.log(result.rowset.length, ' rows fetched');\n     });\n")),(0,n.kt)("h3",{id:"queryprototypevalues"},"Query.prototype.values()"),(0,n.kt)("p",null,"Sets execution values for query. Please check ",(0,n.kt)("a",{parentName:"p",href:"/docs/connectionwrapper/executingqueries"},"executing queries")," section for details."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const query = pool.select()\n    .from('customer')\n    .where(Op.like('name', /Name/));\n\n....\nquery.values({Name: request.values.Name)\n    .execute({\n       autoCommit: true\n     }).then(result => {\n       console.log(result.rowset.length, ' rows fetched');\n     });\n")),(0,n.kt)("h2",{id:"event"},"Event"),(0,n.kt)("h3",{id:"fetch"},"fetch"),(0,n.kt)("p",null,"This event will be called whenever a row fetched from database. This is useful when row values need to be modified before caching by Cursor, or etc."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"pool.select().from('table1')\n    .on('fetch', function(row) {\n      row.CalcField = row.price * row.quantity;\n    })\n    .execute({\n      objectRows: true\n    }, function(err, result) {\n      .....\n    });\n})\n")))}f.isMDXComponent=!0}}]);