"use strict";(self.webpackChunksqb_docs=self.webpackChunksqb_docs||[]).push([[165],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>k});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=o.createContext({}),c=function(e){var r=o.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return o.createElement(i.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},d=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=n,k=u["".concat(i,".").concat(d)]||u[d]||m[d]||a;return t?o.createElement(k,l(l({ref:r},p),{},{components:t})):o.createElement(k,l({ref:r},p))}));function k(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,l=new Array(a);l[0]=d;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[u]="string"==typeof e?e:n,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6641:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>k,frontMatter:()=>s,metadata:()=>c,toc:()=>u});t(7294);var o=t(3905);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){return r=null!=r?r:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):function(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})),e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}const s={title:"Cursor Class",sidebar_position:3,slug:"/connectionwrapper/cursorclass",description:"Cursor Class",keywords:["connection","cursor"]},i=void 0,c={unversionedId:"ConnectionWrapper/CursorClass",id:"ConnectionWrapper/CursorClass",title:"Cursor Class",description:"Cursor Class",source:"@site/docs/ConnectionWrapper/CursorClass.mdx",sourceDirName:"ConnectionWrapper",slug:"/connectionwrapper/cursorclass",permalink:"/docs/docs/connectionwrapper/cursorclass",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Cursor Class",sidebar_position:3,slug:"/connectionwrapper/cursorclass",description:"Cursor Class",keywords:["connection","cursor"]},sidebar:"tutorialSidebar",previous:{title:"Connection Class",permalink:"/docs/docs/connectionwrapper/connectionclass"},next:{title:"Rowset Class",permalink:"/docs/docs/connectionwrapper/rowsetclass"}},p={},u=[{value:"Construction",id:"construction",level:2},{value:"Properties",id:"properties",level:2},{value:"connection",id:"connection",level:3},{value:"isBof",id:"isbof",level:3},{value:"isClosed",id:"isclosed",level:3},{value:"isEof",id:"iseof",level:3},{value:"fetchedRows",id:"fetchedrows",level:3},{value:"fields",id:"fields",level:3},{value:"row",id:"row",level:3},{value:"rowNum",id:"rownum",level:3},{value:"Methods",id:"methods",level:2},{value:"Cursor.prototype.cached()",id:"cursorprototypecached",level:3},{value:"Cursor.prototype.close()",id:"cursorprototypeclose",level:3},{value:"Cursor.prototype.fetchAll()",id:"cursorprototypefetchall",level:3},{value:"Cursor.prototype.moveTo()",id:"cursorprototypemoveto",level:3},{value:"Cursor.prototype.next()",id:"cursorprototypenext",level:3},{value:"Cursor.prototype.prev()",id:"cursorprototypeprev",level:3},{value:"Cursor.prototype.reset()",id:"cursorprototypereset",level:3},{value:"Cursor.prototype.seek()",id:"cursorprototypeseek",level:3},{value:"Cursor.prototype.toStream()",id:"cursorprototypetostream",level:3},{value:"Events",id:"events",level:2},{value:"close",id:"close",level:3},{value:"eof",id:"eof",level:3},{value:"move",id:"move",level:3},{value:"fetch",id:"fetch",level:3}],m={toc:u},d="wrapper";function k(e){var{components:r}=e,t=l(e,["components"]);return(0,o.kt)(d,a(function(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{},o=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),o.forEach((function(r){n(e,r,t[r])}))}return e}({},m,t),{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"When the number of query rows is relatively big, or can't be predicted, it is recommended to use a Cursor. This prevents query results being unexpectedly truncated by the maxRows limit and removes the need to oversize maxRows to avoid such truncation."),(0,o.kt)("h2",{id:"construction"},"Construction"),(0,o.kt)("p",null,"Cursor object is created when executing a query with ",(0,o.kt)("inlineCode",{parentName:"p"},"cursor=true")," option."),(0,o.kt)("p",null,"Cursor increases Connection reference counter and keeps it open until ",(0,o.kt)("inlineCode",{parentName:"p"},"cursor.close()")," called."),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"connection"},"connection"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Connection)"))),(0,o.kt)("p",null,"This is a read only property that returns the ",(0,o.kt)("a",{parentName:"p",href:"connectionclass"},"Connection")," instance."),(0,o.kt)("h3",{id:"isbof"},"isBof"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Boolean)"))),(0,o.kt)("p",null,"This is a read only property that returns if cursor is before first record."),(0,o.kt)("h3",{id:"isclosed"},"isClosed"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Boolean)"))),(0,o.kt)("p",null,"This is a read only property that returns if cursor is closed."),(0,o.kt)("h3",{id:"iseof"},"isEof"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Boolean)"))),(0,o.kt)("p",null,"This is a read only property that returns if cursor is after last record."),(0,o.kt)("h3",{id:"fetchedrows"},"fetchedRows"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Number)"))),(0,o.kt)("p",null,"This is a read only property that returns number of fetched record count from database."),(0,o.kt)("h3",{id:"fields"},"fields"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter")," (",(0,o.kt)("a",{parentName:"em",href:"#"},"FieldCollection"),")")),(0,o.kt)("p",null,"This is a read only property that returns FieldCollection instance which contains information about fields."),(0,o.kt)("h3",{id:"row"},"row"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Object|Array)"))),(0,o.kt)("p",null,"This method returns current record. If query executed with ",(0,o.kt)("inlineCode",{parentName:"p"},"objectRows=true")," option, this property returns object that contains field name/value pairs, otherwise it returns array of values."),(0,o.kt)("h3",{id:"rownum"},"rowNum"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"getter (Number)"))),(0,o.kt)("p",null,"This is a read only property that returns current row number."),(0,o.kt)("h2",{id:"methods"},"Methods"),(0,o.kt)("h3",{id:"cursorprototypecached"},"Cursor.prototype.cached()"),(0,o.kt)("p",null,"This call enables caching fetched rows and lets ",(0,o.kt)("inlineCode",{parentName:"p"},"Cursor")," to move both forward and backward. This method must be called before fetching any record otherwise it throws error."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("em",{parentName:"p"},"It is not recommended enabling caching for large dataset. This may cause memory overhead."))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.cached()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"pool.select('*').from('table1')\n  .execute({cursor: true}).then(result => {\n    const cursor = result.cursor;\n    cursor.cached();\n    // Now cursor can move forward and backward.\n    cursor.close();\n});\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"In the example above, the dataset will be closed after last sub operation finishes.")),(0,o.kt)("h3",{id:"cursorprototypeclose"},"Cursor.prototype.close()"),(0,o.kt)("p",null,"This call closes cursor permanently and releases ",(0,o.kt)("a",{parentName:"p",href:"connectionclass"},"Connection"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"close()")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Returns")," : Returns Promise.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"cursor.close().then(() => {\n console.log('Cursor closed');\n}).catch(e => console.error(e));\n")),(0,o.kt)("h3",{id:"cursorprototypefetchall"},"Cursor.prototype.fetchAll()"),(0,o.kt)("p",null,"If cache is enabled, this call fetches and keeps all records in the internal cache. Otherwise it throws error. Once all all records fetched, you can close ",(0,o.kt)("inlineCode",{parentName:"p"},"Cursor")," safely and can continue to use it in memory."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.fetchAll()")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Returns"),": Returns Promise.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"await cursor.fetchAll();\nawait cursor.close(); // Closes Cursor and releases Connection.\n....\ndo whatever u want with memory cursor.\n\n});\n")),(0,o.kt)("h3",{id:"cursorprototypemoveto"},"Cursor.prototype.moveTo()"),(0,o.kt)("p",null,"This call moves cursor to given row number. If caching is enabled, cursor can move both forward and backward. Otherwise it throws error."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.moveTo(rowNum)")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"rowNum")," (Number) : Row number that will cursor move to. Note that first row number is 1.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Returns"),": Returns Promise."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"await cursor.moveTo(5);\nlet val = cursor.row.Name; // Value of 'Name' at 5th record.\n")),(0,o.kt)("h3",{id:"cursorprototypenext"},"Cursor.prototype.next()"),(0,o.kt)("p",null,"This call moves cursor forward by one row and returns Promise for that row."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.next()")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Returns"),": Returns Promise<Object|Array>.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Iterates rows until EOF\ncursor.next().then(row => {\nif (row)\nconsole.log(cursor.rowNum, row.ID, row.Name);\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Fetches next row\nvar row = await cursor.next();\nif (row)\n  console.log(cursor.rowNum, row.ID, row.Name);\n});\n")),(0,o.kt)("h3",{id:"cursorprototypeprev"},"Cursor.prototype.prev()"),(0,o.kt)("p",null,"This call moves cursor back by one row and returns Promise for that row."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Cache must be enabled to move cursor back.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.prev()")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Returns"),": Returns Promise<Object|Array>.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Iterates rows until BOF\ncursor.prev().then(row => {\nif (row)\nconsole.log(cursor.rowNum, row.ID, row.Name);\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Fetches previous row\nvar row = await cursor.prev();\nif (row)\nconsole.log(cursor.rowNum, row.ID, row.Name);\n")),(0,o.kt)("h3",{id:"cursorprototypereset"},"Cursor.prototype.reset()"),(0,o.kt)("p",null,"This call moves cursor before first row."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Cache must be enabled to move cursor back.")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.reset()")),(0,o.kt)("h3",{id:"cursorprototypeseek"},"Cursor.prototype.seek()"),(0,o.kt)("p",null,"This call moves cursor by given step. If caching is enabled, cursor can move both forward and backward. Otherwise it throws error."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"cursor.seek(step)")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"step")," (Number) : Number of rows that will cursor move by. Negative number moves cursor backward."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Returns"),": Returns Promise.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"await cursor.seek(5); // Moves cursor by 5 rows\nvar n = cursor.rowNum; // n = 5;\n")),(0,o.kt)("h3",{id:"cursorprototypetostream"},"Cursor.prototype.toStream()"),(0,o.kt)("p",null,"This method returns a readable stream."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"toStream([options])")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"options")," (Object):"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"objectMode")," (Boolean=false): If set true, stream will output rows as objects. If false, it will output string buffer.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"limit")," (Number): Sets how many rows will be fetched with stream.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"em"},"outFormat"))," ","[Enum",(0,o.kt)("inlineCode",{parentName:"p"},"<Number>"),"]",": Set the output format."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"'default' | 0 : Default format",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"    {\n    fields: {...},\n    rows: [...rows],\n    numRows: 10,\n    eof: true\n    }\n"))),(0,o.kt)("li",{parentName:"ul"},"'basic' | 1 : Basic format",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"[...rows]\n"))))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"stringify (Function): Custom method to stringify objects.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("em",{parentName:"p"},"Returns"),": CursorStream."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const stream = cursor.toStream();\nstream.pipe(process.stdout);\n")),(0,o.kt)("h2",{id:"events"},"Events"),(0,o.kt)("h3",{id:"close"},"close"),(0,o.kt)("p",null,"This event is called when ",(0,o.kt)("inlineCode",{parentName:"p"},"Cursor")," is closed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"cursor.on('close', () => {\nconsole.log('Cursor closed');\n});\n")),(0,o.kt)("h3",{id:"eof"},"eof"),(0,o.kt)("p",null,"This event is called once when there is no more rows to be fetched from database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"cursor.on('eof', () => {\nconsole.log('No more rows');\n});\n")),(0,o.kt)("h3",{id:"move"},"move"),(0,o.kt)("p",null,"This event is called when current row number changed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"cursor.on('move', (rowNum, row) => {\nconsole.log('Current row is '+ rowNum);\n});\n")),(0,o.kt)("h3",{id:"fetch"},"fetch"),(0,o.kt)("p",null,"This event is called when new record fetched from database. It allows modifying row values before row is cached or returned as a result."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"cursor.on('fetch', (row, rowNum) => {\nrow.date_field = new Date(); // modify the row before it is cached\n});\n")))}k.isMDXComponent=!0}}]);